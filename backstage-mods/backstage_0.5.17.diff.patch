diff -Naur --exclude=node_modules --exclude=*aws-apps* --exclude=package.json --exclude=yarn.lock --exclude=app-config.local.yaml --exclude=.git --exclude=dist-types --exclude=.env --exclude=*.d.ts --exclude=dist --exclude=.DS_Store backstage_0.5.17/app-config.yaml backstage/app-config.yaml
--- backstage_0.5.17/app-config.yaml	2024-08-28 10:01:37
+++ backstage/app-config.yaml	2024-08-28 09:38:57
@@ -1,9 +1,11 @@
 app:
-  title: Scaffolded Backstage App
+  title: OPA
   baseUrl: http://localhost:3000
+  logo: ${CUSTOMER_LOGO}
+  logoIcon: ${CUSTOMER_LOGO_ICON}
 
 organization:
-  name: My Company
+  name: ${CUSTOMER_NAME}
 
 backend:
   # Used for enabling authentication, secret is shared by all backend plugins
@@ -12,6 +14,12 @@
   # auth:
   #   keys:
   #     - secret: ${BACKEND_SECRET}
+  auth:
+    externalAccess:
+      - type: static
+        options:
+          token: ${AUTOMATION_KEY}
+          subject: automation-system
   baseUrl: http://localhost:7007
   listen:
     port: 7007
@@ -28,13 +36,24 @@
   # This is for local development only, it is not recommended to use this in production
   # The production database configuration is stored in app-config.production.yaml
   database:
-    client: better-sqlite3
-    connection: ':memory:'
+    # client: better-sqlite3
+    # connection: ':memory:'
+    client: pg
+    connection:
+      host: ${POSTGRES_HOST}
+      port: ${POSTGRES_PORT}
+      user: ${POSTGRES_USER}
+      password: ${POSTGRES_PASSWORD}
   # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir
+  platformRegion: us-east-1
+  reading:
+    allow:
+      - host: ${GITLAB_HOSTNAME}
+      - host: ${GITHUB_HOSTNAME}
 
 integrations:
   github:
-    - host: github.com
+    - host: ${GITHUB_HOSTNAME}
       # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
       # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
       token: ${GITHUB_TOKEN}
@@ -42,7 +61,15 @@
     # - host: ghe.example.net
     #   apiBaseUrl: https://ghe.example.net/api/v3
     #   token: ${GHE_TOKEN}
+  gitlab:
+    - host: ${GITLAB_HOSTNAME}
+      apiBaseUrl: https://${GITLAB_HOSTNAME}/api/v4
+      baseUrl: https://${GITLAB_HOSTNAME}
+      token: ${SECRET_GITLAB_CONFIG_PROP_apiToken}
 
+permission:
+  enabled: true
+
 proxy:
   ### Example for how to add a proxy endpoint for the frontend.
   ### A typical reason to do this is to handle HTTPS and CORS for internal services.
@@ -64,36 +91,70 @@
 
 auth:
   # see https://backstage.io/docs/auth/ to learn about auth providers
+  environment: development
   providers:
-    # See https://backstage.io/docs/auth/guest/provider
-    guest: {}
+    okta:
+      development:
+        clientId: ${OKTA_CLIENT_ID}
+        clientSecret: ${OKTA_CLIENT_SECRET}
+        audience: ${OKTA_AUDIENCE}
+        # authServerId:
+        # idp:
+        signIn:
+          resolvers:
+            # typically you would pick one of these
+            # - resolver: emailMatchingUserEntityProfileEmail
+            # - resolver: emailLocalPartMatchingUserEntityName
+            # - resolver: emailMatchingUserEntityAnnotation
 
 scaffolder:
   # see https://backstage.io/docs/features/software-templates/configuration for software template options
+  defaultAuthor:
+    name: ${BACKSTAGE_SCAFFOLDER_NAME}
+    email: ${BACKSTAGE_SCAFFOLDER_EMAIL}
 
+gitlab:
+  allowedKinds:
+    - Component
+    - Resource
+    - AWSEnvironmentProvider
+
 catalog:
   import:
     entityFilename: catalog-info.yaml
     pullRequestBranchName: backstage-integration
   rules:
-    - allow: [Component, System, API, Resource, Location]
+    - allow:
+        [
+          Component,
+          System,
+          API,
+          Resource,
+          Location,
+          Template,
+          AWSEnvironment,
+          AWSEnvironmentProvider,
+        ]
   locations:
     # Local example data, file locations are relative to the backend process, typically `packages/backend`
-    - type: file
-      target: ../../examples/entities.yaml
+    # - type: file
+    #   target: ../../examples/entities.yaml
 
-    # Local example template
-    - type: file
-      target: ../../examples/template/template.yaml
-      rules:
-        - allow: [Template]
+    # # Local example template
+    # - type: file
+    #   target: ../../examples/template/template.yaml
+    #   rules:
+    #     - allow: [Template]
 
-    # Local example organizational data
+    # # Local example organizational data
+    # - type: file
+    #   target: ../../examples/org.yaml
+    #   rules:
+    #     - allow: [User, Group]
     - type: file
-      target: ../../examples/org.yaml
+      target: ../../../git-temp/backstage-reference/templates/all-templates.yaml
       rules:
-        - allow: [User, Group]
-
+        - allow: [Location, Component]
     ## Uncomment these lines to add more example data
     # - type: url
     #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml
@@ -103,3 +164,38 @@
     #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
     #   rules:
     #     - allow: [User, Group]
+  providers:
+    okta:
+      - orgUrl: ${OKTA_AUDIENCE}
+        token: ${OKTA_API_TOKEN}
+        frequency: { minutes: 5 }
+        timeout: { minutes: 3 }
+        # userFilter: profile.department eq "engineering"
+        # groupFilter: profile.name eq "Developers"
+    gitlab:
+      opa:
+        host: ${GITLAB_HOSTNAME}
+        branch: main
+        fallbackBranch: main
+        skipForkedRepos: false
+        # group: example-group # Optional. Group and subgroup (if needed) to look for repositories. If not present the whole instance will be scanned
+        groupPattern: "aws-environment*"
+        entityFilename: .backstage/catalog-info.yaml
+        projectPattern: '[\s\S]*'
+        schedule:
+          frequency: { minutes: 30 }
+          timeout: { minutes: 3 }
+    # github:
+    #   # the provider ID can be any camelCase string
+    #   opa:
+    #     organization: 'aws-fsi-pace' # string
+    #     catalogPath: '.backstage/catalog-info.yaml' # string
+    #     filters:
+    #       branch: 'main' # string
+    #       repository: '.*' # Regex
+    #     validateLocationsExist: true
+    #     schedule: # same options as in TaskScheduleDefinition
+    #       # supports cron, ISO duration, "human duration" as used in code
+    #       frequency: { minutes: 30 }
+    #       # supports ISO duration, "human duration" as used in code
+    #       timeout: { minutes: 3 }
\ No newline at end of file
diff -Naur --exclude=node_modules --exclude=*aws-apps* --exclude=package.json --exclude=yarn.lock --exclude=app-config.local.yaml --exclude=.git --exclude=dist-types --exclude=.env --exclude=*.d.ts --exclude=dist --exclude=.DS_Store backstage_0.5.17/packages/app/src/App.tsx backstage/packages/app/src/App.tsx
--- backstage_0.5.17/packages/app/src/App.tsx	2024-08-28 10:01:37
+++ backstage/packages/app/src/App.tsx	2024-08-28 09:38:57
@@ -36,9 +36,32 @@
 import { CatalogGraphPage } from '@backstage/plugin-catalog-graph';
 import { RequirePermission } from '@backstage/plugin-permission-react';
 import { catalogEntityCreatePermission } from '@backstage/plugin-catalog-common/alpha';
+import { AppCatalogPage } from '@aws/plugin-aws-apps-for-backstage';
+import { oktaAuthApiRef } from '@backstage/core-plugin-api';
+import { OPAHomePage, customerTheme, awsTheme, opaTheme } from '@aws/plugin-aws-apps-demo-for-backstage';
+import { darkTheme, lightTheme } from '@backstage/theme';
+import { CssBaseline, ThemeProvider } from '@material-ui/core';
 
 const app = createApp({
   apis,
+  components: {
+    SignInPage: props => {
+      return (
+        <SignInPage
+          {...props}
+          auto
+          providers={[
+            {
+              id: 'okta-auth-provider',
+              title: 'Okta',
+              message: 'Sign in using Okta credentials',
+              apiRef: oktaAuthApiRef,
+            },
+          ]}
+        />
+      );
+    },
+  },
   bindRoutes({ bind }) {
     bind(catalogPlugin.externalRoutes, {
       createComponent: scaffolderPlugin.routes.root,
@@ -56,14 +79,64 @@
       catalogIndex: catalogPlugin.routes.catalogIndex,
     });
   },
-  components: {
-    SignInPage: props => <SignInPage {...props} auto providers={['guest']} />,
-  },
+  themes: [
+    {
+      id: 'customerTheme',
+      title: 'CUSTOMER',
+      variant: 'light',
+      Provider: ({ children }) => (
+        <ThemeProvider theme={customerTheme}>
+          <CssBaseline>{children}</CssBaseline>
+        </ThemeProvider>
+      ),
+    },
+    {
+      id: 'light',
+      title: 'Light',
+      variant: 'light',
+      Provider: ({ children }) => (
+        <ThemeProvider theme={lightTheme}>
+          <CssBaseline>{children}</CssBaseline>
+        </ThemeProvider>
+      ),
+    },
+    {
+      id: 'dark',
+      title: 'Dark',
+      variant: 'dark',
+      Provider: ({ children }) => (
+        <ThemeProvider theme={darkTheme}>
+          <CssBaseline>{children}</CssBaseline>
+        </ThemeProvider>
+      ),
+    },
+    {
+      id: 'awsTheme',
+      title: 'AWS',
+      variant: 'light',
+      Provider: ({ children }) => (
+        <ThemeProvider theme={awsTheme}>
+          <CssBaseline>{children}</CssBaseline>
+        </ThemeProvider>
+      ),
+    },
+    {
+      id: 'opaTheme',
+      title: 'OPA',
+      variant: 'light',
+      Provider: ({ children }) => (
+        <ThemeProvider theme={opaTheme}>
+          <CssBaseline>{children}</CssBaseline>
+        </ThemeProvider>
+      ),
+    },
+  ]
 });
 
 const routes = (
   <FlatRoutes>
     <Route path="/" element={<Navigate to="catalog" />} />
+    <Route path="/home" element={<OPAHomePage />} />
     <Route path="/catalog" element={<CatalogIndexPage />} />
     <Route
       path="/catalog/:namespace/:kind/:name"
@@ -80,7 +153,22 @@
         <ReportIssue />
       </TechDocsAddons>
     </Route>
-    <Route path="/create" element={<ScaffolderPage />} />
+    <Route path="/create" element={
+      <ScaffolderPage
+        groups={[
+          {
+            title: "AWS Environments and Environment Providers",
+            filter: entity =>
+              (entity?.metadata?.tags?.includes('environment-provider') || entity?.metadata?.tags?.includes('aws-environment')) ?? false,
+          },
+          {
+            title: "AWS Resources",
+            filter: entity =>
+              entity?.metadata?.tags?.includes('aws-resource') ?? false,
+          },
+        ]}
+      />
+    } />
     <Route path="/api-docs" element={<ApiExplorerPage />} />
     <Route
       path="/catalog-import"
@@ -95,6 +183,21 @@
     </Route>
     <Route path="/settings" element={<UserSettingsPage />} />
     <Route path="/catalog-graph" element={<CatalogGraphPage />} />
+    <Route path="/aws-apps-search-page" element={<CatalogIndexPage />}>
+      <AppCatalogPage kind="all" />
+    </Route>
+    <Route path="/aws-apps-search-page/environments" element={<CatalogIndexPage />}>
+      <AppCatalogPage kind="awsenvironment" />
+    </Route>
+    <Route path="/aws-apps-search-page/providers" element={<CatalogIndexPage />}>
+      <AppCatalogPage kind="awsenvironmentprovider" />
+    </Route>
+    <Route path="/aws-apps-search-page/apps" element={<CatalogIndexPage />}>
+      <AppCatalogPage kind="component" />
+    </Route>
+    <Route path="/aws-apps-search-page/resources" element={<CatalogIndexPage />}>
+      <AppCatalogPage kind="resource" />
+    </Route>
   </FlatRoutes>
 );
 
diff -Naur --exclude=node_modules --exclude=*aws-apps* --exclude=package.json --exclude=yarn.lock --exclude=app-config.local.yaml --exclude=.git --exclude=dist-types --exclude=.env --exclude=*.d.ts --exclude=dist --exclude=.DS_Store backstage_0.5.17/packages/app/src/apis.ts backstage/packages/app/src/apis.ts
--- backstage_0.5.17/packages/app/src/apis.ts	2024-08-28 10:01:37
+++ backstage/packages/app/src/apis.ts	2024-08-28 09:38:57
@@ -7,13 +7,29 @@
   AnyApiFactory,
   configApiRef,
   createApiFactory,
+  useApp,
 } from '@backstage/core-plugin-api';
+import { catalogApiRef, entityPresentationApiRef } from '@backstage/plugin-catalog-react';
+import { DefaultEntityPresentationApi } from '@backstage/plugin-catalog';
 
 export const apis: AnyApiFactory[] = [
   createApiFactory({
     api: scmIntegrationsApiRef,
     deps: { configApi: configApiRef },
     factory: ({ configApi }) => ScmIntegrationsApi.fromConfig(configApi),
+  }),
+  createApiFactory({
+    api: entityPresentationApiRef,
+    deps: { catalogApi: catalogApiRef },
+    factory: ({ catalogApi }) => {
+      return DefaultEntityPresentationApi.create({
+        catalogApi,
+        kindIcons: {
+          awsenvironment: useApp().getSystemIcon('kind:domain')!,
+          awsenvironmentprovider: useApp().getSystemIcon('kind:system')!,
+        },
+      });
+    },
   }),
   ScmAuth.createDefaultApiFactory(),
 ];
diff -Naur --exclude=node_modules --exclude=*aws-apps* --exclude=package.json --exclude=yarn.lock --exclude=app-config.local.yaml --exclude=.git --exclude=dist-types --exclude=.env --exclude=*.d.ts --exclude=dist --exclude=.DS_Store backstage_0.5.17/packages/app/src/components/Root/Root.tsx backstage/packages/app/src/components/Root/Root.tsx
--- backstage_0.5.17/packages/app/src/components/Root/Root.tsx	2024-08-28 10:01:37
+++ backstage/packages/app/src/components/Root/Root.tsx	2024-08-28 09:38:57
@@ -2,6 +2,7 @@
 import { makeStyles } from '@material-ui/core';
 import HomeIcon from '@material-ui/icons/Home';
 import ExtensionIcon from '@material-ui/icons/Extension';
+import MapIcon from '@material-ui/icons/MyLocation';
 import LibraryBooks from '@material-ui/icons/LibraryBooks';
 import CreateComponentIcon from '@material-ui/icons/AddCircleOutline';
 import LogoFull from './LogoFull';
@@ -22,11 +23,14 @@
   SidebarSpace,
   useSidebarOpenState,
   Link,
+  SidebarSubmenu,
+  SidebarSubmenuItem,
 } from '@backstage/core-components';
 import MenuIcon from '@material-ui/icons/Menu';
 import SearchIcon from '@material-ui/icons/Search';
-import { MyGroupsSidebarItem } from '@backstage/plugin-org';
-import GroupIcon from '@material-ui/icons/People';
+import CloudIcon from '@material-ui/icons/Cloud';
+import { AWSLogoFull, AWSLogoIcon, CustomerLogoIcon, CustomerLogoFullLight } from '@aws/plugin-aws-apps-demo-for-backstage';
+import { useApi, useApp, appThemeApiRef } from '@backstage/core-plugin-api';
 
 const useSidebarLogoStyles = makeStyles({
   root: {
@@ -43,21 +47,36 @@
   },
 });
 
+function getLogo(themeId: string) {
+  switch (themeId) {
+    case 'opaTheme':
+      return [<AWSLogoFull />, <AWSLogoIcon />];
+    case 'customerTheme':
+      return [<CustomerLogoFullLight />, <CustomerLogoIcon />];
+    default:
+      return [<LogoFull />, <LogoIcon />];
+  }
+}
+
 const SidebarLogo = () => {
+  const appThemeApi = useApi(appThemeApiRef);
+  const themeId = appThemeApi.getActiveThemeId();
   const classes = useSidebarLogoStyles();
   const { isOpen } = useSidebarOpenState();
 
+  const [fullLogo, iconLogo] = getLogo(themeId ?? '');
+
   return (
     <div className={classes.root}>
       <Link to="/" underline="none" className={classes.link} aria-label="Home">
-        {isOpen ? <LogoFull /> : <LogoIcon />}
+        {isOpen ? fullLogo : iconLogo}
       </Link>
     </div>
   );
 };
 
 export const Root = ({ children }: PropsWithChildren<{}>) => (
-  <SidebarPage>
+<SidebarPage>
     <Sidebar>
       <SidebarLogo />
       <SidebarGroup label="Search" icon={<SearchIcon />} to="/search">
@@ -66,19 +85,42 @@
       <SidebarDivider />
       <SidebarGroup label="Menu" icon={<MenuIcon />}>
         {/* Global nav, not org-specific */}
-        <SidebarItem icon={HomeIcon} to="catalog" text="Home" />
-        <MyGroupsSidebarItem
-          singularTitle="My Group"
-          pluralTitle="My Groups"
-          icon={GroupIcon}
-        />
+        <SidebarItem icon={HomeIcon} to="/" text="Home" />
+        <SidebarDivider />
+        <SidebarGroup label="AWS" icon={<MenuIcon />}>
+          <SidebarItem icon={CloudIcon} text="AWS">
+            <SidebarSubmenu title="AWS Catalog">
+              <SidebarSubmenuItem
+                title="Environments"
+                to="aws-apps-search-page/environments?filters[kind]=awsenvironment"
+                icon={useApp().getSystemIcon('kind:domain')}
+              />
+              <SidebarSubmenuItem
+                title="Providers"
+                to="aws-apps-search-page/providers?filters[kind]=awsenvironmentprovider"
+                icon={useApp().getSystemIcon('kind:system')}
+              />
+              <SidebarSubmenuItem
+                title="Apps"
+                to="aws-apps-search-page/apps?filters[kind]=component"
+                icon={useApp().getSystemIcon('kind:component')}
+              />
+              <SidebarSubmenuItem
+                title="Resources"
+                to="aws-apps-search-page/resources?filters[kind]=resource"
+                icon={useApp().getSystemIcon('kind:resource')}
+              />
+            </SidebarSubmenu>
+          </SidebarItem>
+        </SidebarGroup>
+        <SidebarDivider />
         <SidebarItem icon={ExtensionIcon} to="api-docs" text="APIs" />
         <SidebarItem icon={LibraryBooks} to="docs" text="Docs" />
         <SidebarItem icon={CreateComponentIcon} to="create" text="Create..." />
         {/* End global nav */}
         <SidebarDivider />
         <SidebarScrollWrapper>
-          {/* Items in this group will be scrollable if they run out of space */}
+          <SidebarItem icon={MapIcon} to="tech-radar" text="Tech Radar" />
         </SidebarScrollWrapper>
       </SidebarGroup>
       <SidebarSpace />
diff -Naur --exclude=node_modules --exclude=*aws-apps* --exclude=package.json --exclude=yarn.lock --exclude=app-config.local.yaml --exclude=.git --exclude=dist-types --exclude=.env --exclude=*.d.ts --exclude=dist --exclude=.DS_Store backstage_0.5.17/packages/app/src/components/catalog/EntityPage.tsx backstage/packages/app/src/components/catalog/EntityPage.tsx
--- backstage_0.5.17/packages/app/src/components/catalog/EntityPage.tsx	2024-08-28 10:01:37
+++ backstage/packages/app/src/components/catalog/EntityPage.tsx	2024-08-28 09:38:57
@@ -27,8 +27,13 @@
   isOrphan,
   hasRelationWarnings,
   EntityRelationWarning,
+  isResourceType,
 } from '@backstage/plugin-catalog';
 import {
+  isGithubActionsAvailable,
+  EntityGithubActionsContent,
+} from '@backstage/plugin-github-actions';
+import {
   EntityUserProfileCard,
   EntityGroupProfileCard,
   EntityMembersListCard,
@@ -41,6 +46,7 @@
   EntityCatalogGraphCard,
 } from '@backstage/plugin-catalog-graph';
 import {
+  Entity,
   RELATION_API_CONSUMED_BY,
   RELATION_API_PROVIDED_BY,
   RELATION_CONSUMES_API,
@@ -50,10 +56,23 @@
   RELATION_PART_OF,
   RELATION_PROVIDES_API,
 } from '@backstage/catalog-model';
+import {
+  AwsEnvironmentPage,
+  AwsEnvironmentProviderPage,
+  AwsComponentPage,
+} from '@aws/plugin-aws-apps-for-backstage';
 
+import { isGitlabAvailable, EntityGitlabContent } from '@immobiliarelabs/backstage-plugin-gitlab';
+
 import { TechDocsAddons } from '@backstage/plugin-techdocs-react';
 import { ReportIssue } from '@backstage/plugin-techdocs-module-addons-contrib';
 
+
+const isCicdApplicable = (entity: Entity) => {
+  return isGitlabAvailable(entity) || isGithubActionsAvailable(entity);
+};
+
+
 const techdocsContent = (
   <EntityTechdocsContent>
     <TechDocsAddons>
@@ -66,31 +85,30 @@
   // This is an example of how you can implement your company's logic in entity page.
   // You can for example enforce that all components of type 'service' should use GitHubActions
   <EntitySwitch>
-    {/*
-      Here you can add support for different CI/CD services, for example
-      using @backstage-community/plugin-github-actions as follows:
-      <EntitySwitch.Case if={isGithubActionsAvailable}>
-        <EntityGithubActionsContent />
-      </EntitySwitch.Case>
-     */}
-
-    <EntitySwitch.Case>
-      <EmptyState
-        title="No CI/CD available for this entity"
-        missing="info"
-        description="You need to add an annotation to your component if you want to enable CI/CD for it. You can read more about annotations in Backstage by clicking the button below."
-        action={
-          <Button
-            variant="contained"
-            color="primary"
-            href="https://backstage.io/docs/features/software-catalog/well-known-annotations"
-          >
-            Read more
-          </Button>
-        }
-      />
-    </EntitySwitch.Case>
-  </EntitySwitch>
+  <EntitySwitch.Case if={isGithubActionsAvailable}>
+    <EntityGithubActionsContent />
+  </EntitySwitch.Case>
+  <EntitySwitch.Case if={isGitlabAvailable}>
+    <EntityGitlabContent />
+  </EntitySwitch.Case>
+  
+  <EntitySwitch.Case>
+    <EmptyState
+      title="No CI/CD available for this entity"
+      missing="info"
+      description="You need to add an annotation to your component if you want to enable CI/CD for it. You can read more about annotations in Backstage by clicking the button below."
+      action={
+        <Button
+          variant="contained"
+          color="primary"
+          href="https://backstage.io/docs/features/software-catalog/well-known-annotations"
+        >
+          Read more
+        </Button>
+      }
+    />
+  </EntitySwitch.Case>
+</EntitySwitch>
 );
 
 const entityWarningContent = (
@@ -128,7 +146,7 @@
       <EntityAboutCard variant="gridItem" />
     </Grid>
     <Grid item md={6} xs={12}>
-      <EntityCatalogGraphCard variant="gridItem" height={400} />
+      <EntityCatalogGraphCard variant="gridItem" height={400} showArrowHeads />
     </Grid>
 
     <Grid item md={4} xs={12}>
@@ -218,6 +236,10 @@
       {overviewContent}
     </EntityLayout.Route>
 
+    <EntityLayout.Route path="/ci-cd" title="CI/CD" if={isCicdApplicable}>
+      {cicdContent}
+    </EntityLayout.Route>
+
     <EntityLayout.Route path="/docs" title="Docs">
       {techdocsContent}
     </EntityLayout.Route>
@@ -230,6 +252,14 @@
       {serviceEntityPage}
     </EntitySwitch.Case>
 
+  {/* AWS Modifications */ }
+
+   <EntitySwitch.Case if={isComponentType('aws-app')}>
+      <AwsComponentPage componentType='aws-app'/>
+    </EntitySwitch.Case>
+    {/* End of AWS Modifications */ }
+
+
     <EntitySwitch.Case if={isComponentType('website')}>
       {websiteEntityPage}
     </EntitySwitch.Case>
@@ -320,7 +350,7 @@
           <EntityAboutCard variant="gridItem" />
         </Grid>
         <Grid item md={6} xs={12}>
-          <EntityCatalogGraphCard variant="gridItem" height={400} />
+          <EntityCatalogGraphCard variant="gridItem" height={400} showArrowHeads />
         </Grid>
         <Grid item md={4} xs={12}>
           <EntityLinksCard />
@@ -353,6 +383,7 @@
           RELATION_DEPENDS_ON,
         ]}
         unidirectional={false}
+        showArrowHeads
       />
     </EntityLayout.Route>
   </EntityLayout>
@@ -367,7 +398,7 @@
           <EntityAboutCard variant="gridItem" />
         </Grid>
         <Grid item md={6} xs={12}>
-          <EntityCatalogGraphCard variant="gridItem" height={400} />
+          <EntityCatalogGraphCard variant="gridItem" height={400} showArrowHeads />
         </Grid>
         <Grid item md={6}>
           <EntityHasSystemsCard variant="gridItem" />
@@ -377,9 +408,35 @@
   </EntityLayout>
 );
 
+ {/* AWS Modifications */ }
+
+ const awsEnvironmentProviderEntityPage = (
+  <AwsEnvironmentProviderPage />
+);
+
+const awsEnvironmentEntityPage = (
+  <AwsEnvironmentPage />
+);
+
+const resourceEntityPage = (
+<EntitySwitch>
+<EntitySwitch.Case if={isResourceType('aws-resource')}>
+   <AwsComponentPage componentType='aws-resource'/>
+</EntitySwitch.Case>
+<EntitySwitch.Case>{defaultEntityPage}</EntitySwitch.Case>
+</EntitySwitch>
+);
+
+{/* End of AWS Modifications */ }
+
 export const entityPage = (
   <EntitySwitch>
     <EntitySwitch.Case if={isKind('component')} children={componentPage} />
+    {/* AWS Modifications */ }
+    <EntitySwitch.Case if={isKind('resource')} children={resourceEntityPage} />
+    <EntitySwitch.Case if={isKind('awsenvironment')} children={awsEnvironmentEntityPage} />
+    <EntitySwitch.Case if={isKind('awsenvironmentprovider')} children={awsEnvironmentProviderEntityPage} />
+    {/* End AWS Modifications */ }
     <EntitySwitch.Case if={isKind('api')} children={apiPage} />
     <EntitySwitch.Case if={isKind('group')} children={groupPage} />
     <EntitySwitch.Case if={isKind('user')} children={userPage} />
diff -Naur --exclude=node_modules --exclude=*aws-apps* --exclude=package.json --exclude=yarn.lock --exclude=app-config.local.yaml --exclude=.git --exclude=dist-types --exclude=.env --exclude=*.d.ts --exclude=dist --exclude=.DS_Store backstage_0.5.17/packages/backend/src/index.ts backstage/packages/backend/src/index.ts
--- backstage_0.5.17/packages/backend/src/index.ts	2024-08-28 10:01:37
+++ backstage/packages/backend/src/index.ts	2024-08-28 09:38:57
@@ -7,6 +7,34 @@
  */
 
 import { createBackend } from '@backstage/backend-defaults';
+import { coreServices, createBackendModule } from '@backstage/backend-plugin-api';
+import { CatalogClient } from '@backstage/catalog-client';
+import { scaffolderActionsExtensionPoint } from '@backstage/plugin-scaffolder-node/alpha';
+import { catalogProcessingExtensionPoint } from '@backstage/plugin-catalog-node/alpha';
+import {
+  createRepoAccessTokenAction,
+  createSecretAction,
+  createS3BucketAction,
+  getEnvProvidersAction,
+  getComponentInfoAction,
+  getSsmParametersAction,
+  getPlatformParametersAction,
+  getPlatformMetadataAction,
+} from '@aws/plugin-scaffolder-backend-aws-apps-for-backstage';
+import { ScmIntegrations } from '@backstage/integration';
+import { OktaOrgEntityProvider } from '@roadiehq/catalog-backend-module-okta';
+import { createAppendFileAction, createWriteFileAction } from '@roadiehq/scaffolder-backend-module-utils';
+import { customOktaAuth } from './plugins/CustomOktaAuth';
+import oktaCatalogBackendModule, { EntityProviderFactory, oktaCatalogBackendEntityProviderFactoryExtensionPoint } from '@roadiehq/catalog-backend-module-okta/new-backend';
+import { loggerToWinstonLogger } from '@backstage/backend-common';
+import { createGitlabGroupEnsureExistsAction, createGitlabIssueAction, createGitlabProjectAccessTokenAction, createGitlabProjectDeployTokenAction, createGitlabProjectVariableAction, createGitlabRepoPushAction, createPublishGitlabAction, createPublishGitlabMergeRequestAction, createTriggerGitlabPipelineAction, editGitlabIssueAction } from '@backstage/plugin-scaffolder-backend-module-gitlab';
+import { policyExtensionPoint } from '@backstage/plugin-permission-node/alpha';
+import { OpaSamplePermissionPolicy } from './plugins/OpaSamplePermissionPolicy';
+import { AnnotateScmSlugEntityProcessor } from '@backstage/plugin-catalog-backend';
+import { gitlabPlugin,  catalogPluginGitlabFillerProcessorModule,} from '@immobiliarelabs/backstage-plugin-gitlab-backend'
+// import { getRootLogger, legacyPlugin, loadBackendConfig, loggerToWinstonLogger, useHotMemoize } from '@backstage/backend-common';
+// import { PluginEnvironment } from './types';
+// import catalog from './plugins/catalog';
 
 const backend = createBackend();
 
@@ -14,27 +42,62 @@
 backend.add(import('@backstage/plugin-proxy-backend/alpha'));
 backend.add(import('@backstage/plugin-scaffolder-backend/alpha'));
 backend.add(import('@backstage/plugin-techdocs-backend/alpha'));
+backend.add(import('@backstage/plugin-scaffolder-backend-module-gitlab'));
+backend.add(import('@backstage/plugin-scaffolder-backend-module-github'));
 
+// Temp fix until @backstage/plugin-scaffolder-backend-module-gitlab will create a plugin.ts
+
+
+export const gitlabModule = createBackendModule({
+  pluginId: 'scaffolder',
+  moduleId: 'gitlab',
+  register({ registerInit }) {
+    registerInit({
+      deps: {
+        scaffolder: scaffolderActionsExtensionPoint,
+        config: coreServices.rootConfig,
+      },
+      async init({ scaffolder, config }) {
+        const integrations = ScmIntegrations.fromConfig(config);
+
+        scaffolder.addActions(
+          createGitlabGroupEnsureExistsAction({ integrations }),
+          createGitlabIssueAction({ integrations }),
+          createGitlabProjectAccessTokenAction({ integrations }),
+          createGitlabProjectDeployTokenAction({ integrations }),
+          createGitlabProjectVariableAction({ integrations }),
+          createGitlabRepoPushAction({ integrations }),
+          editGitlabIssueAction({ integrations }),
+          createPublishGitlabAction({ config, integrations }),
+          createPublishGitlabMergeRequestAction({ integrations }),
+          createTriggerGitlabPipelineAction({ integrations }),
+        );
+      },
+    });
+  },
+});
+
+
+
 // auth plugin
 backend.add(import('@backstage/plugin-auth-backend'));
 // See https://backstage.io/docs/backend-system/building-backends/migrating#the-auth-plugin
-backend.add(import('@backstage/plugin-auth-backend-module-guest-provider'));
+// backend.add(import('@backstage/plugin-auth-backend-module-guest-provider'));
 // See https://backstage.io/docs/auth/guest/provider
 
 // catalog plugin
 backend.add(import('@backstage/plugin-catalog-backend/alpha'));
-backend.add(
-  import('@backstage/plugin-catalog-backend-module-scaffolder-entity-model'),
-);
+backend.add(import('@backstage/plugin-catalog-backend-module-scaffolder-entity-model'));
+backend.add(import('@backstage/plugin-catalog-backend-module-gitlab/alpha'));
+backend.add(import('@backstage/plugin-catalog-backend-module-github/alpha'));
 
+
 // See https://backstage.io/docs/features/software-catalog/configuration#subscribing-to-catalog-errors
 backend.add(import('@backstage/plugin-catalog-backend-module-logs'));
 
 // permission plugin
 backend.add(import('@backstage/plugin-permission-backend/alpha'));
-backend.add(
-  import('@backstage/plugin-permission-backend-module-allow-all-policy'),
-);
+backend.add(import('@backstage/plugin-permission-backend-module-allow-all-policy'));
 
 // search plugin
 backend.add(import('@backstage/plugin-search-backend/alpha'));
@@ -46,5 +109,150 @@
 // search collators
 backend.add(import('@backstage/plugin-search-backend-module-catalog/alpha'));
 backend.add(import('@backstage/plugin-search-backend-module-techdocs/alpha'));
+
+// OPA AWS backend Plugin
+backend.add(import('@aws/plugin-aws-apps-backend-for-backstage'));
+
+// OPA Custom AWS Entities processors
+backend.add(import('@aws/backstage-plugin-catalog-backend-module-aws-apps-entities-processor'));
+
+
+
+// Loading Okta catalog - using new backend - bug - awaiting for fix: https://github.com/RoadieHQ/roadie-backstage-plugins/issues/1537
+export const oktaCatalogBackendModuleCustom = createBackendModule({
+  pluginId: 'catalog',
+  moduleId: 'okta-entity-provider-custom',
+  register(env) {
+    env.registerInit({
+      deps: {
+        provider: oktaCatalogBackendEntityProviderFactoryExtensionPoint,
+        logger: coreServices.logger,
+        config: coreServices.rootConfig,
+      },
+      async init({ provider, logger, config }) {
+        const factory: EntityProviderFactory = () =>
+          OktaOrgEntityProvider.fromConfig(config, {
+            logger: loggerToWinstonLogger(logger),
+            userNamingStrategy: 'strip-domain-email',
+            groupNamingStrategy: 'kebab-case-name',
+          });
+
+        provider.setEntityProviderFactory(factory);
+      },
+    });
+  },
+});
+
+backend.add(oktaCatalogBackendModuleCustom);
+// Temp fix until roadiehq will update the plugin
+const oktaBackendFeature = oktaCatalogBackendModule;
+backend.add(oktaBackendFeature());
+// backend.add(import('@roadiehq/catalog-backend-module-okta/new-backend'));
+
+
+
+// import('@roadiehq/catalog-backend-module-okta/new-backend').then(module => {
+//   let backendFeature = module.default
+//   backend.add(backendFeature());
+// });
+
+
+
+// End of Loading Okta catalog
+
+
+// Loading OKTA users and groups - Legacy code:
+// backend.add(legacyPlugin('catalog', import('./plugins/catalog')));
+
+// OKTA provider
+backend.add(customOktaAuth);
+// backend.add(import('@backstage/plugin-auth-backend-module-okta-provider'));
+
+// Load custom scaffolder actions
+const scaffolderModuleAWSCustomExtensions = createBackendModule({
+  pluginId: 'scaffolder', // name of the plugin that the module is targeting
+  moduleId: 'aws-apps',
+  register(env) {
+  
+    env.registerInit({
+      deps: {
+        scaffolder: scaffolderActionsExtensionPoint,
+        config: coreServices.rootConfig,
+        discovery: coreServices.discovery
+      },
+      async init({ scaffolder, config, discovery }) {
+        // Here you have the opportunity to interact with the extension
+        // point before the plugin itself gets instantiated
+        const integrations = ScmIntegrations.fromConfig(config);
+        const catalogClient = new CatalogClient({
+          discoveryApi: discovery,
+        });
+
+        scaffolder.addActions(createWriteFileAction())
+        scaffolder.addActions(createAppendFileAction())
+        // scaffolder.addActions(createZipAction())
+        // scaffolder.addActions(createSleepAction())
+        // scaffolder.addActions(createMergeJSONAction())
+        // scaffolder.addActions(createMergeAction())
+        // scaffolder.addActions(createParseFileAction())
+        // scaffolder.addActions(createSerializeYamlAction())
+        // scaffolder.addActions(createSerializeJsonAction())
+        // scaffolder.addActions(createJSONataAction())
+        // scaffolder.addActions(createYamlJSONataTransformAction())
+        // scaffolder.addActions(createJsonJSONataTransformAction())
+        // scaffolder.addActions(createReplaceInFileAction())
+        scaffolder.addActions(createS3BucketAction())
+        scaffolder.addActions(createSecretAction({envConfig:config}))
+        scaffolder.addActions(getEnvProvidersAction({ catalogClient }))
+        scaffolder.addActions(getComponentInfoAction())
+        scaffolder.addActions(getSsmParametersAction())
+        scaffolder.addActions(getPlatformMetadataAction({envConfig:config}))
+        scaffolder.addActions(getPlatformParametersAction({envConfig:config}))
+        scaffolder.addActions( createRepoAccessTokenAction({integrations, envConfig:config}));
+      },
+    });
+  },
+});
+
+backend.add(scaffolderModuleAWSCustomExtensions);
+
+// OPA permission policy sample
+
+const opaCustomPolicy =  createBackendModule({
+  pluginId: 'permission',
+  moduleId: 'custom-opa-policy',
+  register(reg) {
+    reg.registerInit({
+      deps: { policy: policyExtensionPoint },
+      async init({ policy }) {
+        policy.setPolicy(new OpaSamplePermissionPolicy());
+      },
+    });
+  },
+});
+console.log("Loaded: " + opaCustomPolicy.name)
+// backend.add(opaCustomPolicy);
+
+// Custom annotator
+const catalogModuleCustomExtensions = createBackendModule({
+  pluginId: 'catalog',
+  moduleId: 'custom-extensions',
+  register(env) {
+    env.registerInit({
+      deps: {
+        catalog: catalogProcessingExtensionPoint,
+        config: coreServices.rootConfig,
+     
+      },
+      async init({ catalog, config }) {
+        catalog.addProcessor(AnnotateScmSlugEntityProcessor.fromConfig(config))
+      },
+    });
+  },
+});
+backend.add(catalogModuleCustomExtensions);
+backend.add(gitlabPlugin);
+backend.add(catalogPluginGitlabFillerProcessorModule);
+
 
 backend.start();
diff -Naur --exclude=node_modules --exclude=*aws-apps* --exclude=package.json --exclude=yarn.lock --exclude=app-config.local.yaml --exclude=.git --exclude=dist-types --exclude=.env --exclude=*.d.ts --exclude=dist --exclude=.DS_Store backstage_0.5.17/packages/backend/src/plugins/CustomOktaAuth.ts backstage/packages/backend/src/plugins/CustomOktaAuth.ts
--- backstage_0.5.17/packages/backend/src/plugins/CustomOktaAuth.ts	1969-12-31 19:00:00
+++ backstage/packages/backend/src/plugins/CustomOktaAuth.ts	2024-08-28 09:38:57
@@ -0,0 +1,60 @@
+import { createBackendModule } from '@backstage/backend-plugin-api';
+import { oktaAuthenticator } from '@backstage/plugin-auth-backend-module-okta-provider';
+import {
+  authProvidersExtensionPoint,
+  createOAuthProviderFactory,
+} from '@backstage/plugin-auth-node';
+import { stringifyEntityRef, DEFAULT_NAMESPACE } from '@backstage/catalog-model';
+
+export const customOktaAuth = createBackendModule({
+  // This ID must be exactly "auth" because that's the plugin it targets
+  pluginId: 'auth',
+  // This ID must be unique, but can be anything
+  moduleId: 'custom-auth-provider',
+  register(reg) {
+    reg.registerInit({
+      deps: { providers: authProvidersExtensionPoint },
+      async init({ providers }) {
+        providers.registerProvider({
+          // This ID must match the actual provider config, e.g. addressing
+          // auth.providers.okta means that this must be "okta".
+          providerId: 'okta',
+          // Use createProxyAuthProviderFactory instead if it's one of the proxy
+          // based providers rather than an OAuth based one
+          factory: createOAuthProviderFactory({
+            authenticator: oktaAuthenticator,
+            async signInResolver(info, ctx) {
+              const { profile: { email } } = info;
+              if (!email) {
+                  throw new Error(
+                    'Login failed, user profile does not contain an email',
+                  );
+              }
+              // Split the email into the local part and the domain.
+              const [localPart] = email.split('@');
+
+              let fullProfileJson = (info.result.fullProfile as any)._json;
+              let departmentName = "";
+              if(fullProfileJson.department) {
+                departmentName = fullProfileJson.department.replace('/[^a-zA-Z0-9]/g','-').replace('/-+/g','-').substring(1,62).toLowerCase();
+              }
+          
+              // By using `stringifyEntityRef` we ensure that the reference is formatted correctly
+              const userEntity = stringifyEntityRef({
+                  kind: 'User',
+                  name: localPart,
+                  namespace: DEFAULT_NAMESPACE,
+              });
+              return ctx.issueToken({
+                  claims: {
+                      sub: userEntity,
+                      ent: ["group:" + departmentName],
+                  },
+              });
+            },
+          }),
+        });
+      },
+    });
+  },
+});
\ No newline at end of file
diff -Naur --exclude=node_modules --exclude=*aws-apps* --exclude=package.json --exclude=yarn.lock --exclude=app-config.local.yaml --exclude=.git --exclude=dist-types --exclude=.env --exclude=*.d.ts --exclude=dist --exclude=.DS_Store backstage_0.5.17/packages/backend/src/plugins/OpaSamplePermissionPolicy.ts backstage/packages/backend/src/plugins/OpaSamplePermissionPolicy.ts
--- backstage_0.5.17/packages/backend/src/plugins/OpaSamplePermissionPolicy.ts	1969-12-31 19:00:00
+++ backstage/packages/backend/src/plugins/OpaSamplePermissionPolicy.ts	2024-08-28 09:38:57
@@ -0,0 +1,94 @@
+import { readOpaAppAuditPermission } from '@aws/plugin-aws-apps-common-for-backstage';
+import { DEFAULT_NAMESPACE, stringifyEntityRef } from '@backstage/catalog-model';
+import { BackstageIdentityResponse } from '@backstage/plugin-auth-node';
+import { catalogConditions, createCatalogConditionalDecision } from '@backstage/plugin-catalog-backend/alpha';
+import { RESOURCE_TYPE_CATALOG_ENTITY, catalogEntityDeletePermission, catalogEntityReadPermission } from '@backstage/plugin-catalog-common/alpha';
+import { AuthorizeResult, PolicyDecision, isPermission, isResourcePermission } from '@backstage/plugin-permission-common';
+import { PermissionPolicy, PolicyQuery } from '@backstage/plugin-permission-node';
+
+
+// The Group entity ref constants below are based on group identifiers created from the auth IdP or manually created
+// Update the entity ref identifiers as appropriate to match your Backstage installation
+const ADMINS_GROUP = stringifyEntityRef({ kind: 'Group', namespace: DEFAULT_NAMESPACE, name: "admins" });
+const DEVOPS_GROUP = stringifyEntityRef({ kind: 'Group', namespace: DEFAULT_NAMESPACE, name: "dev-ops" });
+// const QA_GROUP = stringifyEntityRef({ kind: 'Group', namespace: DEFAULT_NAMESPACE, name: "qa" });
+const DEVELOPERS_GROUP = stringifyEntityRef({ kind: 'Group', namespace: DEFAULT_NAMESPACE, name: "developers" });
+// const EVERYONE_GROUP = stringifyEntityRef({ kind: 'Group', namespace: DEFAULT_NAMESPACE, name: "everyone" });
+
+export class OpaSampleAllowAllPolicy implements PermissionPolicy {
+
+  async handle(): Promise<PolicyDecision> {
+    return { result: AuthorizeResult.ALLOW };
+  }
+}
+  
+
+
+
+export class OpaSamplePermissionPolicy implements PermissionPolicy {
+
+  async handle(
+    request: PolicyQuery, 
+    user?: BackstageIdentityResponse
+  ): Promise<PolicyDecision> {
+
+    // The example permission decision checks follow a "first found" strategy.
+    // The order of the checks is very important!!
+
+    // store the array of entityRefs which allow this user to claim ownership of an entity
+    const ownershipGroups = user?.identity.ownershipEntityRefs || [];
+
+    // Example permission decision:
+    //   ALLOW admin and devops group members to perform any action
+    const allowAllGroups = [ADMINS_GROUP, DEVOPS_GROUP];
+    if (ownershipGroups.some(x => allowAllGroups.includes(x))) {
+      return { result: AuthorizeResult.ALLOW };
+    }
+
+    // Example permission decision: 
+    //   DENY audit read access unless the user is a member of Admin or DevOps
+    //   The implementation below assumes that prior checks have returned an
+    //   'allow' policy decision for groups other than 'developer'
+    if (isPermission(request.permission, readOpaAppAuditPermission) && ownershipGroups.includes(DEVELOPERS_GROUP)) {
+      return { result: AuthorizeResult.DENY };
+    }
+
+    // Example permission decision:
+    //   Multiple groups of permission decisions are nested under the first check to see if we're working with catalog entities
+    if (isResourcePermission(request.permission, RESOURCE_TYPE_CATALOG_ENTITY)) {
+
+      // Example permission decision:
+      //   DENY catalog entity delete permission (Unregister entity) to users
+      //   if they cannot claim ownership of the entity
+      if (isPermission(request.permission, catalogEntityDeletePermission)) {
+        return createCatalogConditionalDecision(
+          request.permission,
+          catalogConditions.isEntityOwner({
+            claims: user?.identity.ownershipEntityRefs ?? [],
+          }),
+        );
+      }
+      // Example permission decision:
+      //   DENY users access to software templates of type 'aws-environment' or
+      //   'aws-environment-provider' if they cannot claim ownership of the entity
+      if (isPermission(request.permission, catalogEntityReadPermission)) {
+        return createCatalogConditionalDecision(request.permission, {
+          not: {
+            allOf: [
+              catalogConditions.isEntityKind({ kinds: ['template'] }),
+              {
+                anyOf: [
+                  catalogConditions.hasSpec({ key: 'type', value: 'aws-environment' }),
+                  catalogConditions.hasSpec({ key: 'type', value: 'aws-environment-provider' }),
+                ],
+              },
+            ],
+          },
+        });
+      }
+    }
+
+    // Default policy decision is to ALLOW permission requests
+    return { result: AuthorizeResult.ALLOW };
+  }
+}
diff -Naur --exclude=node_modules --exclude=*aws-apps* --exclude=package.json --exclude=yarn.lock --exclude=app-config.local.yaml --exclude=.git --exclude=dist-types --exclude=.env --exclude=*.d.ts --exclude=dist --exclude=.DS_Store backstage_0.5.17/packages/backend/src/plugins/catalog.ts backstage/packages/backend/src/plugins/catalog.ts
--- backstage_0.5.17/packages/backend/src/plugins/catalog.ts	1969-12-31 19:00:00
+++ backstage/packages/backend/src/plugins/catalog.ts	2024-08-28 09:38:57
@@ -0,0 +1,22 @@
+import { CatalogBuilder } from '@backstage/plugin-catalog-backend';
+import { Router } from 'express';
+import { PluginEnvironment } from '../types';
+import { OktaOrgEntityProvider } from '@roadiehq/catalog-backend-module-okta';
+
+export default async function createPlugin(
+  env: PluginEnvironment,
+): Promise<Router> {
+  const builder = await CatalogBuilder.create(env);
+  const orgProvider = OktaOrgEntityProvider.fromConfig(env.config, {
+    logger: env.logger,
+    userNamingStrategy: 'strip-domain-email',
+    groupNamingStrategy: 'kebab-case-name',
+  });
+    
+  builder.addEntityProvider(orgProvider);
+
+  const { processingEngine, router } = await builder.build();
+  orgProvider.run();
+  await processingEngine.start();
+  return router;
+}
diff -Naur --exclude=node_modules --exclude=*aws-apps* --exclude=package.json --exclude=yarn.lock --exclude=app-config.local.yaml --exclude=.git --exclude=dist-types --exclude=.env --exclude=*.d.ts --exclude=dist --exclude=.DS_Store backstage_0.5.17/packages/backend/src/types.ts backstage/packages/backend/src/types.ts
--- backstage_0.5.17/packages/backend/src/types.ts	1969-12-31 19:00:00
+++ backstage/packages/backend/src/types.ts	2024-08-28 09:38:57
@@ -0,0 +1,25 @@
+import { Logger } from 'winston';
+import { Config } from '@backstage/config';
+import {
+  PluginCacheManager,
+  PluginDatabaseManager,
+  PluginEndpointDiscovery,
+  TokenManager,
+  UrlReader,
+} from '@backstage/backend-common';
+import { PluginTaskScheduler } from '@backstage/backend-tasks';
+import { PermissionEvaluator } from '@backstage/plugin-permission-common';
+import { IdentityApi } from '@backstage/plugin-auth-node';
+
+export type PluginEnvironment = {
+  logger: Logger;
+  database: PluginDatabaseManager;
+  cache: PluginCacheManager;
+  config: Config;
+  reader: UrlReader;
+  discovery: PluginEndpointDiscovery;
+  tokenManager: TokenManager;
+  scheduler: PluginTaskScheduler;
+  permissions: PermissionEvaluator;
+  identity: IdentityApi;
+};
